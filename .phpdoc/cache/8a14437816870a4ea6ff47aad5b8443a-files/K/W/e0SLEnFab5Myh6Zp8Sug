1723192370
8a14437816870a4ea6ff47aad5b8443a-phpdoc%3A5de8b9f62402ea88afb20f05e46c4726-8c34e7d8e3dd802bacf16c687a1392c1
s:28664:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjE4OiJzaW1wbGUtcGhwdW5pdC5waHAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MTp7czozMjoiXFN5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxNTp7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwcm9wZXJ0aWVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbWV0aG9kcyI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDU4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDYwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjMyOiJcU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjMxOiJTeW1mb255RXhjbHVkZUxpc3RTaW1wbGVQaHB1bml0Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwYXJlbnQiO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHJlYWRPbmx5IjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGFkYXRhIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AYXR0cmlidXRlcyI7YTowOnt9fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjhjMzRlN2Q4ZTNkZDgwMmJhY2YxNmM2ODdhMTM5MmMxIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTI6InZlbmRvci9zeW1mb255L3BocHVuaXQtYnJpZGdlL2Jpbi9zaW1wbGUtcGhwdW5pdC5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjE5MDc3OiI8P3BocAoKLyoKICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIFN5bWZvbnkgcGFja2FnZS4KICoKICogKGMpIEZhYmllbiBQb3RlbmNpZXIgPGZhYmllbkBzeW1mb255LmNvbT4KICoKICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0UKICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuCiAqLwoKLy8gUGxlYXNlIHVwZGF0ZSB3aGVuIHBocHVuaXQgbmVlZHMgdG8gYmUgcmVpbnN0YWxsZWQgd2l0aCBmcmVzaCBkZXBzOgovLyBDYWNoZS1JZDogMjAyMS0wMi0wNCAxMTowMCBVVEMKCmlmICgnY2xpJyAhPT0gXFBIUF9TQVBJICYmICdwaHBkYmcnICE9PSBcUEhQX1NBUEkpIHsKICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1RoaXMgc2NyaXB0IG11c3QgYmUgcnVuIGZyb20gdGhlIGNvbW1hbmQgbGluZS4nKTsKfQoKZXJyb3JfcmVwb3J0aW5nKC0xKTsKCmdsb2JhbCAkYXJndiwgJGFyZ2M7CiRhcmd2ID0gJF9TRVJWRVJbJ2FyZ3YnXSA/PyBbXTsKJGFyZ2MgPSAkX1NFUlZFUlsnYXJnYyddID8/IDA7CiRnZXRFbnZWYXIgPSBmdW5jdGlvbiAoJG5hbWUsICRkZWZhdWx0ID0gZmFsc2UpIHVzZSAoJGFyZ3YpIHsKICAgIGlmIChmYWxzZSAhPT0gJHZhbHVlID0gZ2V0ZW52KCRuYW1lKSkgewogICAgICAgIHJldHVybiAkdmFsdWU7CiAgICB9CgogICAgc3RhdGljICRwaHB1bml0Q29uZmlnID0gbnVsbDsKICAgIGlmIChudWxsID09PSAkcGhwdW5pdENvbmZpZykgewogICAgICAgICRwaHB1bml0Q29uZmlnRmlsZW5hbWUgPSBudWxsOwogICAgICAgICRnZXRQaHBVbml0Q29uZmlnID0gZnVuY3Rpb24gKCRwcm9iYWJsZUNvbmZpZykgdXNlICgmJGdldFBocFVuaXRDb25maWcpIHsKICAgICAgICAgICAgaWYgKCEkcHJvYmFibGVDb25maWcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc19kaXIoJHByb2JhYmxlQ29uZmlnKSkgewogICAgICAgICAgICAgICAgcmV0dXJuICRnZXRQaHBVbml0Q29uZmlnKCRwcm9iYWJsZUNvbmZpZy5cRElSRUNUT1JZX1NFUEFSQVRPUi4ncGhwdW5pdC54bWwnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRwcm9iYWJsZUNvbmZpZykpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkcHJvYmFibGVDb25maWc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRwcm9iYWJsZUNvbmZpZy4nLmRpc3QnKSkgewogICAgICAgICAgICAgICAgcmV0dXJuICRwcm9iYWJsZUNvbmZpZy4nLmRpc3QnOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9OwoKICAgICAgICBmb3JlYWNoICgkYXJndiBhcyAkY2xpQXJndW1lbnRJbmRleCA9PiAkY2xpQXJndW1lbnQpIHsKICAgICAgICAgICAgaWYgKCctLScgPT09ICRjbGlBcmd1bWVudCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbG9uZyBvcHRpb24KICAgICAgICAgICAgaWYgKCctLWNvbmZpZ3VyYXRpb24nID09PSAkY2xpQXJndW1lbnQgJiYgYXJyYXlfa2V5X2V4aXN0cygkY2xpQXJndW1lbnRJbmRleCArIDEsICRhcmd2KSkgewogICAgICAgICAgICAgICAgJHBocHVuaXRDb25maWdGaWxlbmFtZSA9ICRnZXRQaHBVbml0Q29uZmlnKCRhcmd2WyRjbGlBcmd1bWVudEluZGV4ICsgMV0pOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gc2hvcnQgb3B0aW9uCiAgICAgICAgICAgIGlmICgwID09PSBzdHJwb3MoJGNsaUFyZ3VtZW50LCAnLWMnKSkgewogICAgICAgICAgICAgICAgaWYgKCctYycgPT09ICRjbGlBcmd1bWVudCAmJiBhcnJheV9rZXlfZXhpc3RzKCRjbGlBcmd1bWVudEluZGV4ICsgMSwgJGFyZ3YpKSB7CiAgICAgICAgICAgICAgICAgICAgJHBocHVuaXRDb25maWdGaWxlbmFtZSA9ICRnZXRQaHBVbml0Q29uZmlnKCRhcmd2WyRjbGlBcmd1bWVudEluZGV4ICsgMV0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkcGhwdW5pdENvbmZpZ0ZpbGVuYW1lID0gJGdldFBocFVuaXRDb25maWcoc3Vic3RyKCRjbGlBcmd1bWVudCwgMikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRwaHB1bml0Q29uZmlnRmlsZW5hbWUgPSAkcGhwdW5pdENvbmZpZ0ZpbGVuYW1lID86ICRnZXRQaHBVbml0Q29uZmlnKCdwaHB1bml0LnhtbCcpOwoKICAgICAgICBpZiAoJHBocHVuaXRDb25maWdGaWxlbmFtZSkgewogICAgICAgICAgICAkcGhwdW5pdENvbmZpZyA9IG5ldyBET01Eb2N1bWVudCgpOwogICAgICAgICAgICAkcGhwdW5pdENvbmZpZy0+bG9hZCgkcGhwdW5pdENvbmZpZ0ZpbGVuYW1lKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkcGhwdW5pdENvbmZpZyA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIGlmIChmYWxzZSAhPT0gJHBocHVuaXRDb25maWcpIHsKICAgICAgICAkdmFyID0gbmV3IERPTVhQYXRoKCRwaHB1bml0Q29uZmlnKTsKICAgICAgICBmb3JlYWNoICgkdmFyLT5xdWVyeSgnLy9waHAvc2VydmVyW0BuYW1lPSInLiRuYW1lLiciXScpIGFzICR2YXIpIHsKICAgICAgICAgICAgcmV0dXJuICR2YXItPmdldEF0dHJpYnV0ZSgndmFsdWUnKTsKICAgICAgICB9CiAgICAgICAgZm9yZWFjaCAoJHZhci0+cXVlcnkoJy8vcGhwL2VudltAbmFtZT0iJy4kbmFtZS4nIl0nKSBhcyAkdmFyKSB7CiAgICAgICAgICAgIHJldHVybiAkdmFyLT5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkZGVmYXVsdDsKfTsKCiRwYXNzdGhydU9yRmFpbCA9IGZ1bmN0aW9uICgkY29tbWFuZCkgewogICAgcGFzc3RocnUoJGNvbW1hbmQsICRzdGF0dXMpOwoKICAgIGlmICgkc3RhdHVzKSB7CiAgICAgICAgZXhpdCgkc3RhdHVzKTsKICAgIH0KfTsKCmlmIChcUEhQX1ZFUlNJT05fSUQgPj0gODAwMDApIHsKICAgICRQSFBVTklUX1ZFUlNJT04gPSAkZ2V0RW52VmFyKCdTWU1GT05ZX1BIUFVOSVRfVkVSU0lPTicsICc5LjYnKSA/OiAnOS42JzsKfSBlbHNlIHsKICAgICRQSFBVTklUX1ZFUlNJT04gPSAkZ2V0RW52VmFyKCdTWU1GT05ZX1BIUFVOSVRfVkVSU0lPTicsICc4LjUnKSA/OiAnOC41JzsKfQoKJE1BWF9QSFBVTklUX1ZFUlNJT04gPSAkZ2V0RW52VmFyKCdTWU1GT05ZX01BWF9QSFBVTklUX1ZFUlNJT04nLCBmYWxzZSk7CgppZiAoJE1BWF9QSFBVTklUX1ZFUlNJT04gJiYgdmVyc2lvbl9jb21wYXJlKCRNQVhfUEhQVU5JVF9WRVJTSU9OLCAkUEhQVU5JVF9WRVJTSU9OLCAnPCcpKSB7CiAgICAkUEhQVU5JVF9WRVJTSU9OID0gJE1BWF9QSFBVTklUX1ZFUlNJT047Cn0KCiRQSFBVTklUX1JFTU9WRV9SRVRVUk5fVFlQRUhJTlQgPSBmaWx0ZXJfdmFyKCRnZXRFbnZWYXIoJ1NZTUZPTllfUEhQVU5JVF9SRU1PVkVfUkVUVVJOX1RZUEVISU5UJywgJzAnKSwgXEZJTFRFUl9WQUxJREFURV9CT09MRUFOKTsKCiRDT01QT1NFUl9KU09OID0gZ2V0ZW52KCdDT01QT1NFUicpID86ICdjb21wb3Nlci5qc29uJzsKCiRyb290ID0gX19ESVJfXzsKd2hpbGUgKCFmaWxlX2V4aXN0cygkcm9vdC4nLycuJENPTVBPU0VSX0pTT04pIHx8IGZpbGVfZXhpc3RzKCRyb290LicvRGVwcmVjYXRpb25FcnJvckhhbmRsZXIucGhwJykpIHsKICAgIGlmICgkcm9vdCA9PT0gZGlybmFtZSgkcm9vdCkpIHsKICAgICAgICBicmVhazsKICAgIH0KICAgICRyb290ID0gZGlybmFtZSgkcm9vdCk7Cn0KCiRvbGRQd2QgPSBnZXRjd2QoKTsKJFBIUFVOSVRfRElSID0gcnRyaW0oJGdldEVudlZhcignU1lNRk9OWV9QSFBVTklUX0RJUicsICRyb290LicvdmVuZG9yL2Jpbi8ucGhwdW5pdCcpLCAnLycuXERJUkVDVE9SWV9TRVBBUkFUT1IpOwokUEhQID0gZGVmaW5lZCgnUEhQX0JJTkFSWScpID8gXFBIUF9CSU5BUlkgOiAncGhwJzsKJFBIUCA9IGVzY2FwZXNoZWxsYXJnKCRQSFApOwppZiAoJ3BocGRiZycgPT09IFxQSFBfU0FQSSkgewogICAgJFBIUCAuPSAnIC1xcnInOwp9CgokZGVmYXVsdEVudnMgPSBbCiAgICAnQ09NUE9TRVInID0+ICdjb21wb3Nlci5qc29uJywKICAgICdDT01QT1NFUl9WRU5ET1JfRElSJyA9PiAndmVuZG9yJywKICAgICdDT01QT1NFUl9CSU5fRElSJyA9PiAnYmluJywKICAgICdTWU1GT05ZX1NJTVBMRV9QSFBVTklUX0JJTl9ESVInID0+IF9fRElSX18sCl07Cgpmb3JlYWNoICgkZGVmYXVsdEVudnMgYXMgJGVudk5hbWUgPT4gJGVudlZhbHVlKSB7CiAgICBpZiAoJGVudlZhbHVlICE9PSBnZXRlbnYoJGVudk5hbWUpKSB7CiAgICAgICAgcHV0ZW52KCIkZW52TmFtZT0kZW52VmFsdWUiKTsKICAgICAgICAkX1NFUlZFUlskZW52TmFtZV0gPSAkX0VOVlskZW52TmFtZV0gPSAkZW52VmFsdWU7CiAgICB9Cn0KCmlmICgnZGlzYWJsZWQnID09PSAkZ2V0RW52VmFyKCdTWU1GT05ZX0RFUFJFQ0FUSU9OU19IRUxQRVInKSkgewogICAgcHV0ZW52KCdTWU1GT05ZX0RFUFJFQ0FUSU9OU19IRUxQRVI9ZGlzYWJsZWQnKTsKfQoKaWYgKCEkZ2V0RW52VmFyKCdET0NUUklORV9ERVBSRUNBVElPTlMnKSkgewogICAgcHV0ZW52KCdET0NUUklORV9ERVBSRUNBVElPTlM9dHJpZ2dlcicpOwogICAgJF9TRVJWRVJbJ0RPQ1RSSU5FX0RFUFJFQ0FUSU9OUyddID0gJF9FTlZbJ0RPQ1RSSU5FX0RFUFJFQ0FUSU9OUyddID0gJ3RyaWdnZXInOwp9CgokQ09NUE9TRVIgPSAoJENPTVBPU0VSID0gZ2V0ZW52KCdDT01QT1NFUl9CSU5BUlknKSkKICAgIHx8IGZpbGVfZXhpc3RzKCRDT01QT1NFUiA9ICRvbGRQd2QuJy9jb21wb3Nlci5waGFyJykKICAgIHx8ICgkQ09NUE9TRVIgPSBydHJpbSgoc3RyaW5nKSAoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IgPyBwcmVnX3JlcGxhY2UoJy9bXHJcbl0uKi8nLCAnJywgc2hlbGxfZXhlYygnd2hlcmUuZXhlIGNvbXBvc2VyLnBoYXIgMj4gTlVMJykpIDogc2hlbGxfZXhlYygnd2hpY2ggY29tcG9zZXIucGhhciAyPiAvZGV2L251bGwnKSkpKQogICAgfHwgKCRDT01QT1NFUiA9IHJ0cmltKChzdHJpbmcpICgnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUiA/IHByZWdfcmVwbGFjZSgnL1tcclxuXS4qLycsICcnLCBzaGVsbF9leGVjKCd3aGVyZS5leGUgY29tcG9zZXIgMj4gTlVMJykpIDogc2hlbGxfZXhlYygnd2hpY2ggY29tcG9zZXIgMj4gL2Rldi9udWxsJykpKSkKICAgIHx8IGZpbGVfZXhpc3RzKCRDT01QT1NFUiA9IHJ0cmltKChzdHJpbmcpICgnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUiA/IHNoZWxsX2V4ZWMoJ2dpdCByZXYtcGFyc2UgLS1zaG93LXRvcGxldmVsIDI+IE5VTCcpIDogc2hlbGxfZXhlYygnZ2l0IHJldi1wYXJzZSAtLXNob3ctdG9wbGV2ZWwgMj4gL2Rldi9udWxsJykpKS5cRElSRUNUT1JZX1NFUEFSQVRPUi4nY29tcG9zZXIucGhhcicpCiAgICA/ICgnIyEvdXNyL2Jpbi9lbnYgcGhwJyA9PT0gZmlsZV9nZXRfY29udGVudHMoJENPTVBPU0VSLCBmYWxzZSwgbnVsbCwgMCwgMTgpID8gJFBIUCA6ICcnKS4nICcuZXNjYXBlc2hlbGxhcmcoJENPTVBPU0VSKSAvLyBkZXRlY3Qgc2hlbGwgd3JhcHBlcnMgYnkgbG9va2luZyBhdCB0aGUgc2hlYmFuZwogICAgOiAnY29tcG9zZXInOwoKJHByZXZDYWNoZURpciA9IGdldGVudignQ09NUE9TRVJfQ0FDSEVfRElSJyk7CmlmICgkcHJldkNhY2hlRGlyKSB7CiAgICBpZiAoZmFsc2UgPT09ICRhYnNvbHV0ZUNhY2hlRGlyID0gcmVhbHBhdGgoJHByZXZDYWNoZURpcikpIHsKICAgICAgICBAbWtkaXIoJHByZXZDYWNoZURpciwgMDc3NywgdHJ1ZSk7CiAgICAgICAgJGFic29sdXRlQ2FjaGVEaXIgPSByZWFscGF0aCgkcHJldkNhY2hlRGlyKTsKICAgIH0KICAgIGlmICgkYWJzb2x1dGVDYWNoZURpcikgewogICAgICAgIHB1dGVudigiQ09NUE9TRVJfQ0FDSEVfRElSPSRhYnNvbHV0ZUNhY2hlRGlyIik7CiAgICB9IGVsc2UgewogICAgICAgICRwcmV2Q2FjaGVEaXIgPSBmYWxzZTsKICAgIH0KfQokU1lNRk9OWV9QSFBVTklUX1JFTU9WRSA9ICRnZXRFbnZWYXIoJ1NZTUZPTllfUEhQVU5JVF9SRU1PVkUnLCAncGhwc3BlYy9wcm9waGVjeScuKCRQSFBVTklUX1ZFUlNJT04gPCA2LjAgPyAnIHN5bWZvbnkveWFtbCcgOiAnJykpOwokU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUgPSAkZ2V0RW52VmFyKCdTWU1GT05ZX1BIUFVOSVRfUkVRVUlSRScsICcnKTsKJGNvbmZpZ3VyYXRpb25IYXNoID0gbWQ1KGltcGxvZGUoXFBIUF9FT0wsIFttZDVfZmlsZShfX0ZJTEVfXyksICRTWU1GT05ZX1BIUFVOSVRfUkVNT1ZFLCAkU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUsIChpbnQpICRQSFBVTklUX1JFTU9WRV9SRVRVUk5fVFlQRUhJTlRdKSk7CiRQSFBVTklUX1ZFUlNJT05fRElSID0gc3ByaW50ZigncGhwdW5pdC0lcy0lZCcsICRQSFBVTklUX1ZFUlNJT04sICRQSFBVTklUX1JFTU9WRV9SRVRVUk5fVFlQRUhJTlQpOwppZiAoIWZpbGVfZXhpc3RzKCIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIvcGhwdW5pdCIpIHx8ICRjb25maWd1cmF0aW9uSGFzaCAhPT0gQGZpbGVfZ2V0X2NvbnRlbnRzKCIkUEhQVU5JVF9ESVIvLiRQSFBVTklUX1ZFUlNJT05fRElSLm1kNSIpKSB7CiAgICAvLyBCdWlsZCBhIHN0YW5kYWxvbmUgcGhwdW5pdCB3aXRob3V0IHN5bWZvbnkveWFtbCBub3IgcHJvcGhlY3kgYnkgZGVmYXVsdAoKICAgIEBta2RpcigkUEhQVU5JVF9ESVIsIDA3NzcsIHRydWUpOwogICAgY2hkaXIoJFBIUFVOSVRfRElSKTsKICAgIGlmIChmaWxlX2V4aXN0cygiJFBIUFVOSVRfVkVSU0lPTl9ESVIiKSkgewogICAgICAgIHBhc3N0aHJ1KHNwcmludGYoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IgPyAncm1kaXIgL1MgL1EgJXMgMj4gTlVMJyA6ICdybSAtcmYgJXMnLCBlc2NhcGVzaGVsbGFyZygiJFBIUFVOSVRfVkVSU0lPTl9ESVIub2xkIikpKTsKICAgICAgICByZW5hbWUoIiRQSFBVTklUX1ZFUlNJT05fRElSIiwgIiRQSFBVTklUX1ZFUlNJT05fRElSLm9sZCIpOwogICAgICAgIHBhc3N0aHJ1KHNwcmludGYoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IgPyAncm1kaXIgL1MgL1EgJXMnIDogJ3JtIC1yZiAlcycsIGVzY2FwZXNoZWxsYXJnKCIkUEhQVU5JVF9WRVJTSU9OX0RJUi5vbGQiKSkpOwogICAgfQoKICAgICRpbmZvID0gW107CiAgICBmb3JlYWNoIChleHBsb2RlKCJcbiIsIGAkQ09NUE9TRVIgaW5mbyAtLW5vLWFuc2kgLWEgLW4gcGhwdW5pdC9waHB1bml0ICIkUEhQVU5JVF9WRVJTSU9OLioiYCkgYXMgJGxpbmUpIHsKICAgICAgICAkbGluZSA9IHJ0cmltKCRsaW5lKTsKCiAgICAgICAgaWYgKCEkaW5mbyAmJiBwcmVnX21hdGNoKCcvXnZlcnNpb25zICs6IC8nLCAkbGluZSkpIHsKICAgICAgICAgICAgJGluZm9bJ3ZlcnNpb25zJ10gPSBleHBsb2RlKCcsICcsIGx0cmltKHN1YnN0cigkbGluZSwgOSksICc6ICcpKTsKICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJGluZm9bJ3JlcXVpcmVzJ10pKSB7CiAgICAgICAgICAgIGlmICgnJyA9PT0gJGxpbmUpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkbGluZSA9IGV4cGxvZGUoJyAnLCAkbGluZSwgMik7CiAgICAgICAgICAgICRpbmZvWydyZXF1aXJlcyddWyRsaW5lWzBdXSA9ICRsaW5lWzFdOwogICAgICAgIH0gZWxzZWlmICgkaW5mbyAmJiAncmVxdWlyZXMnID09PSAkbGluZSkgewogICAgICAgICAgICAkaW5mb1sncmVxdWlyZXMnXSA9IFtdOwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoaW5fYXJyYXkoJy0tY29sb3JzPW5ldmVyJywgJGFyZ3YsIHRydWUpIHx8IChpc3NldCgkYXJndlskaSA9IGFycmF5X3NlYXJjaCgnbmV2ZXInLCAkYXJndiwgdHJ1ZSkgLSAxXSkgJiYgJy0tY29sb3JzJyA9PT0gJGFyZ3ZbJGldKSkgewogICAgICAgICRDT01QT1NFUiAuPSAnIC0tbm8tYW5zaSc7CiAgICB9IGVsc2UgewogICAgICAgICRDT01QT1NFUiAuPSAnIC0tYW5zaSc7CiAgICB9CgogICAgJGluZm8gKz0gWwogICAgICAgICd2ZXJzaW9ucycgPT4gW10sCiAgICAgICAgJ3JlcXVpcmVzJyA9PiBbJ3BocCcgPT4gJyonXSwKICAgIF07CgogICAgJHN0YWJsZVZlcnNpb25zID0gYXJyYXlfZmlsdGVyKCRpbmZvWyd2ZXJzaW9ucyddLCBmdW5jdGlvbiAoJHYpIHsKICAgICAgICByZXR1cm4gIXByZWdfbWF0Y2goJy8tZGV2JHxeZGV2LS8nLCAkdik7CiAgICB9KTsKCiAgICBpZiAoISRzdGFibGVWZXJzaW9ucykgewogICAgICAgICRwYXNzdGhydU9yRmFpbCgiJENPTVBPU0VSIGNyZWF0ZS1wcm9qZWN0IC0taWdub3JlLXBsYXRmb3JtLXJlcXMgLS1uby1pbnN0YWxsIC0tcHJlZmVyLWRpc3QgLS1uby1zY3JpcHRzIC0tbm8tcGx1Z2lucyAtLW5vLXByb2dyZXNzIC1zIGRldiBwaHB1bml0L3BocHVuaXQgJFBIUFVOSVRfVkVSU0lPTl9ESVIgXCIkUEhQVU5JVF9WRVJTSU9OLipcIiIpOwogICAgfSBlbHNlIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiBjcmVhdGUtcHJvamVjdCAtLWlnbm9yZS1wbGF0Zm9ybS1yZXFzIC0tbm8taW5zdGFsbCAtLXByZWZlci1kaXN0IC0tbm8tc2NyaXB0cyAtLW5vLXBsdWdpbnMgLS1uby1wcm9ncmVzcyBwaHB1bml0L3BocHVuaXQgJFBIUFVOSVRfVkVSU0lPTl9ESVIgXCIkUEhQVU5JVF9WRVJTSU9OLipcIiIpOwogICAgfQoKICAgIEBjb3B5KCIkUEhQVU5JVF9WRVJTSU9OX0RJUi9waHB1bml0LnhzZCIsICdwaHB1bml0LnhzZCcpOwogICAgY2hkaXIoIiRQSFBVTklUX1ZFUlNJT05fRElSIik7CiAgICBpZiAoJFNZTUZPTllfUEhQVU5JVF9SRU1PVkUpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiByZW1vdmUgLS1uby11cGRhdGUgLS1uby1pbnRlcmFjdGlvbiAiLiRTWU1GT05ZX1BIUFVOSVRfUkVNT1ZFKTsKICAgIH0KICAgIGlmICgkU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiByZXF1aXJlIC0tbm8tdXBkYXRlIC0tbm8taW50ZXJhY3Rpb24gIi4kU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUpOwogICAgfQogICAgaWYgKDUuMSA8PSAkUEhQVU5JVF9WRVJTSU9OICYmICRQSFBVTklUX1ZFUlNJT04gPCA1LjQpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiByZXF1aXJlIC0tbm8tdXBkYXRlIHBocHVuaXQvcGhwdW5pdC1tb2NrLW9iamVjdHMgXCJ+My4xLjBcIiIpOwogICAgfQoKICAgIGlmIChwcmVnX21hdGNoKCd7XF4oKFxkKytcLilcZCsrKVtcZFwuXSokfScsICRpbmZvWydyZXF1aXJlcyddWydwaHAnXSwgJHBocFZlcnNpb24pICYmIHZlcnNpb25fY29tcGFyZSgkcGhwVmVyc2lvblsyXS4nOTknLCBcUEhQX1ZFUlNJT04sICc8JykpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiBjb25maWcgcGxhdGZvcm0ucGhwIFwiJHBocFZlcnNpb25bMV0uOTlcIiIpOwogICAgfSBlbHNlIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiBjb25maWcgLS11bnNldCBwbGF0Zm9ybS5waHAiKTsKICAgIH0KICAgIGlmIChmaWxlX2V4aXN0cygkcGF0aCA9ICRyb290LicvdmVuZG9yL3N5bWZvbnkvcGhwdW5pdC1icmlkZ2UnKSkgewogICAgICAgICRoYXlzdGFjayA9ICIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIiOwogICAgICAgICRyb290TGVuID0gc3RybGVuKCRyb290KTsKCiAgICAgICAgJHAgPSAoJHJvb3RMZW4gPD0gc3RybGVuKCRoYXlzdGFjaykgPyBzdHJfcmVwZWF0KCcuLi8nLCBzdWJzdHJfY291bnQoJGhheXN0YWNrLCAnLycsICRyb290TGVuKSkgOiAnJykuJ3ZlbmRvci9zeW1mb255L3BocHVuaXQtYnJpZGdlJzsKICAgICAgICBpZiAocmVhbHBhdGgoJHApID09PSByZWFscGF0aCgkcGF0aCkpIHsKICAgICAgICAgICAgJHBhdGggPSAkcDsKICAgICAgICB9CiAgICAgICAgJHBhc3N0aHJ1T3JGYWlsKCIkQ09NUE9TRVIgcmVxdWlyZSAtLW5vLXVwZGF0ZSBzeW1mb255L3BocHVuaXQtYnJpZGdlIFwiKkBkZXZcIiIpOwogICAgICAgICRwYXNzdGhydU9yRmFpbCgiJENPTVBPU0VSIGNvbmZpZyByZXBvc2l0b3JpZXMucGhwdW5pdC1icmlkZ2UgcGF0aCAiLmVzY2FwZXNoZWxsYXJnKHN0cl9yZXBsYWNlKCcvJywgXERJUkVDVE9SWV9TRVBBUkFUT1IsICRwYXRoKSkpOwogICAgICAgIGlmICgnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUikgewogICAgICAgICAgICBmaWxlX3B1dF9jb250ZW50cygnY29tcG9zZXIuanNvbicsIHByZWdfcmVwbGFjZSgnL14oIHs4fSkicGhwdW5pdC1icmlkZ2UiOiBceyQvbScsICIkMFxuJDEgICAgIi4nIm9wdGlvbnMiOiB7InN5bWxpbmsiOiBmYWxzZX0sJywgZmlsZV9nZXRfY29udGVudHMoJ2NvbXBvc2VyLmpzb24nKSkpOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgJHBhc3N0aHJ1T3JGYWlsKCIkQ09NUE9TRVIgcmVxdWlyZSAtLW5vLXVwZGF0ZSBzeW1mb255L3BocHVuaXQtYnJpZGdlIFwiKlwiIik7CiAgICB9CiAgICAkcHJldlJvb3QgPSBnZXRlbnYoJ0NPTVBPU0VSX1JPT1RfVkVSU0lPTicpOwogICAgcHV0ZW52KCJDT01QT1NFUl9ST09UX1ZFUlNJT049JFBIUFVOSVRfVkVSU0lPTi45OSIpOwogICAgJHEgPSAnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUiAmJiBcUEhQX1ZFUlNJT05fSUQgPCA4MDAwMCA/ICciJyA6ICcnOwogICAgLy8gLS1uby1zdWdnZXN0IGlzIG5vdCBpbiB0aGUgbGlzdCB0byBrZWVwIGNvbXBhdCB3aXRoIGNvbXBvc2VyIDEuMCwgd2hpY2ggaXMgc2hpcHBlZCB3aXRoIFVidW50dSAxNi4wNExUUwogICAgJGV4aXQgPSBwcm9jX2Nsb3NlKHByb2Nfb3BlbigiJHEkQ09NUE9TRVIgdXBkYXRlIC0tbm8tZGV2IC0tcHJlZmVyLWRpc3QgLS1uby1wcm9ncmVzcyAkcSIsIFtdLCAkcCwgZ2V0Y3dkKCkpKTsKICAgIHB1dGVudignQ09NUE9TRVJfUk9PVF9WRVJTSU9OJy4oZmFsc2UgIT09ICRwcmV2Um9vdCA/ICc9Jy4kcHJldlJvb3QgOiAnJykpOwogICAgaWYgKCRwcmV2Q2FjaGVEaXIpIHsKICAgICAgICBwdXRlbnYoIkNPTVBPU0VSX0NBQ0hFX0RJUj0kcHJldkNhY2hlRGlyIik7CiAgICB9CiAgICBpZiAoJGV4aXQpIHsKICAgICAgICBleGl0KCRleGl0KTsKICAgIH0KCiAgICAvLyBNdXRhdGUgVGVzdENhc2UgY29kZQogICAgJGFsdGVyZWRDb2RlID0gZmlsZV9nZXRfY29udGVudHMoJGFsdGVyZWRGaWxlID0gJy4vc3JjL0ZyYW1ld29yay9UZXN0Q2FzZS5waHAnKTsKICAgIGlmICgkUEhQVU5JVF9SRU1PVkVfUkVUVVJOX1RZUEVISU5UKSB7CiAgICAgICAgJGFsdGVyZWRDb2RlID0gcHJlZ19yZXBsYWNlKCcvXiAgICAoKD86cHJvdGVjdGVkfHB1YmxpYykoPzogc3RhdGljKT8gZnVuY3Rpb24gXHcrXChcKSk6IHZvaWQvbScsICcgICAgJDEnLCAkYWx0ZXJlZENvZGUpOwogICAgfQogICAgJGFsdGVyZWRDb2RlID0gcHJlZ19yZXBsYWNlKCcvYWJzdHJhY3QgY2xhc3MgVGVzdENhc2VbXlx7XStcey8nLCAnJDAgJy5cUEhQX0VPTC4iICAgIHVzZSBcU3ltZm9ueVxCcmlkZ2VcUGhwVW5pdFxMZWdhY3lcUG9seWZpbGxUZXN0Q2FzZVRyYWl0OyIsICRhbHRlcmVkQ29kZSwgMSk7CiAgICBmaWxlX3B1dF9jb250ZW50cygkYWx0ZXJlZEZpbGUsICRhbHRlcmVkQ29kZSk7CgogICAgLy8gTXV0YXRlIEFzc2VydCBjb2RlCiAgICAkYWx0ZXJlZENvZGUgPSBmaWxlX2dldF9jb250ZW50cygkYWx0ZXJlZEZpbGUgPSAnLi9zcmMvRnJhbWV3b3JrL0Fzc2VydC5waHAnKTsKICAgICRhbHRlcmVkQ29kZSA9IHByZWdfcmVwbGFjZSgnL2Fic3RyYWN0IGNsYXNzIEFzc2VydFteXHtdK1x7LycsICckMCAnLlxQSFBfRU9MLiIgICAgdXNlIFxTeW1mb255XEJyaWRnZVxQaHBVbml0XExlZ2FjeVxQb2x5ZmlsbEFzc2VydFRyYWl0OyIsICRhbHRlcmVkQ29kZSwgMSk7CiAgICBmaWxlX3B1dF9jb250ZW50cygkYWx0ZXJlZEZpbGUsICRhbHRlcmVkQ29kZSk7CgogICAgZmlsZV9wdXRfY29udGVudHMoJ3BocHVuaXQnLCA8PDwnRU9QSFAnCjw/cGhwCgpkZWZpbmUoJ1BIUFVOSVRfQ09NUE9TRVJfSU5TVEFMTCcsIF9fRElSX18uJy92ZW5kb3IvYXV0b2xvYWQucGhwJyk7CnJlcXVpcmUgUEhQVU5JVF9DT01QT1NFUl9JTlNUQUxMOwoKaWYgKCFjbGFzc19leGlzdHMoXFN5bWZvbnlFeGNsdWRlTGlzdFBocHVuaXQ6OmNsYXNzLCBmYWxzZSkpIHsKICAgIGNsYXNzIFN5bWZvbnlFeGNsdWRlTGlzdFBocHVuaXQge30KfQppZiAobWV0aG9kX2V4aXN0cyhcUEhQVW5pdFxVdGlsXEV4Y2x1ZGVMaXN0OjpjbGFzcywgJ2FkZERpcmVjdG9yeScpKSB7CiAgICAobmV3IFBIUFVuaXRcVXRpbFxFeGNsdWRlbGlzdCgpKS0+Z2V0RXhjbHVkZWREaXJlY3RvcmllcygpOwogICAgUEhQVW5pdFxVdGlsXEV4Y2x1ZGVMaXN0OjphZGREaXJlY3RvcnkoXGRpcm5hbWUoKG5ldyBcUmVmbGVjdGlvbkNsYXNzKFxTeW1mb255RXhjbHVkZUxpc3RQaHB1bml0OjpjbGFzcykpLT5nZXRGaWxlTmFtZSgpKSk7CiAgICBjbGFzc19leGlzdHMoXFN5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQ6OmNsYXNzLCBmYWxzZSkgJiYgUEhQVW5pdFxVdGlsXEV4Y2x1ZGVMaXN0OjphZGREaXJlY3RvcnkoXGRpcm5hbWUoKG5ldyBcUmVmbGVjdGlvbkNsYXNzKFxTeW1mb255RXhjbHVkZUxpc3RTaW1wbGVQaHB1bml0OjpjbGFzcykpLT5nZXRGaWxlTmFtZSgpKSk7Cn0gZWxzZWlmIChtZXRob2RfZXhpc3RzKFxQSFBVbml0XFV0aWxcQmxhY2tsaXN0OjpjbGFzcywgJ2FkZERpcmVjdG9yeScpKSB7CiAgICAobmV3IFBIUFVuaXRcVXRpbFxCbGFja0xpc3QoKSktPmdldEJsYWNrbGlzdGVkRGlyZWN0b3JpZXMoKTsKICAgIFBIUFVuaXRcVXRpbFxCbGFja2xpc3Q6OmFkZERpcmVjdG9yeShcZGlybmFtZSgobmV3IFxSZWZsZWN0aW9uQ2xhc3MoXFN5bWZvbnlFeGNsdWRlTGlzdFBocHVuaXQ6OmNsYXNzKSktPmdldEZpbGVOYW1lKCkpKTsKICAgIGNsYXNzX2V4aXN0cyhcU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdDo6Y2xhc3MsIGZhbHNlKSAmJiBQSFBVbml0XFV0aWxcQmxhY2tsaXN0OjphZGREaXJlY3RvcnkoXGRpcm5hbWUoKG5ldyBcUmVmbGVjdGlvbkNsYXNzKFxTeW1mb255RXhjbHVkZUxpc3RTaW1wbGVQaHB1bml0OjpjbGFzcykpLT5nZXRGaWxlTmFtZSgpKSk7Cn0gZWxzZSB7CiAgICBQSFBVbml0XFV0aWxcQmxhY2tsaXN0OjokYmxhY2tsaXN0ZWRDbGFzc05hbWVzWydTeW1mb255RXhjbHVkZUxpc3RQaHB1bml0J10gPSAxOwogICAgUEhQVW5pdFxVdGlsXEJsYWNrbGlzdDo6JGJsYWNrbGlzdGVkQ2xhc3NOYW1lc1snU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdCddID0gMTsKfQoKU3ltZm9ueVxCcmlkZ2VcUGhwVW5pdFxUZXh0VUlcQ29tbWFuZDo6bWFpbigpOwoKRU9QSFAKICAgICk7CiAgICBjaGRpcignLi4nKTsKICAgIGZpbGVfcHV0X2NvbnRlbnRzKCIuJFBIUFVOSVRfVkVSU0lPTl9ESVIubWQ1IiwgJGNvbmZpZ3VyYXRpb25IYXNoKTsKICAgIGNoZGlyKCRvbGRQd2QpOwp9CgovLyBDcmVhdGUgYSBzeW1saW5rIHdpdGggYSBwcmVkaWN0YWJsZSBwYXRoIHBvaW50aW5nIHRvIHRoZSBjdXJyZW50bHkgdXNlZCB2ZXJzaW9uLgovLyBUaGlzIGlzIHVzZWZ1bCBmb3Igc3RhdGljIGFuYWx5dGljcyB0b29scyBzdWNoIGFzIFBIUFN0YW4gaGF2aW5nIHRvIGxvYWQgUEhQVW5pdCdzIGNsYXNzZXMKLy8gYW5kIGZvciBvdGhlciB0ZXN0aW5nIGxpYnJhcmllcyBzdWNoIGFzIEJlaGF0IHVzaW5nIFBIUFVuaXQncyBhc3NlcnRpb25zLgpjaGRpcigkUEhQVU5JVF9ESVIpOwppZiAoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IpIHsKICAgIHBhc3N0aHJ1KCdybWRpciAvUyAvUSBwaHB1bml0IDI+IE5VTCcpOwogICAgcGFzc3RocnUoc3ByaW50ZignbWtsaW5rIC9qIHBocHVuaXQgJXMgPiBOVUwgMj4mMScsIGVzY2FwZXNoZWxsYXJnKCRQSFBVTklUX1ZFUlNJT05fRElSKSkpOwp9IGVsc2UgewogICAgaWYgKGZpbGVfZXhpc3RzKCdwaHB1bml0JykpIHsKICAgICAgICBAdW5saW5rKCdwaHB1bml0Jyk7CiAgICB9CiAgICBAc3ltbGluaygkUEhQVU5JVF9WRVJTSU9OX0RJUiwgJ3BocHVuaXQnKTsKfQpjaGRpcigkb2xkUHdkKTsKCmlmICgkUEhQVU5JVF9WRVJTSU9OIDwgOC4wKSB7CiAgICAkYXJndiA9IGFycmF5X2ZpbHRlcigkYXJndiwgZnVuY3Rpb24gKCR2KSB1c2UgKCYkYXJnYykgewogICAgICAgIGlmICgnLS1kby1ub3QtY2FjaGUtcmVzdWx0JyAhPT0gJHYpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIC0tJGFyZ2M7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0pOwp9IGVsc2VpZiAoZmlsdGVyX3ZhcihnZXRlbnYoJ1NZTUZPTllfUEhQVU5JVF9ESVNBQkxFX1JFU1VMVF9DQUNIRScpLCBcRklMVEVSX1ZBTElEQVRFX0JPT0xFQU4pKSB7CiAgICAkYXJndltdID0gJy0tZG8tbm90LWNhY2hlLXJlc3VsdCc7CiAgICArKyRhcmdjOwp9CgokY29tcG9uZW50cyA9IFtdOwokY21kID0gYXJyYXlfbWFwKCdlc2NhcGVzaGVsbGFyZycsICRhcmd2KTsKJGV4aXQgPSAwOwoKaWYgKGlzc2V0KCRhcmd2WzFdKSAmJiAnc3ltZm9ueScgPT09ICRhcmd2WzFdICYmICFmaWxlX2V4aXN0cygnc3ltZm9ueScpICYmIGZpbGVfZXhpc3RzKCdzcmMvU3ltZm9ueScpKSB7CiAgICAkYXJndlsxXSA9ICdzcmMvU3ltZm9ueSc7Cn0KaWYgKGlzc2V0KCRhcmd2WzFdKSAmJiBpc19kaXIoJGFyZ3ZbMV0pICYmICFmaWxlX2V4aXN0cygkYXJndlsxXS4nL3BocHVuaXQueG1sLmRpc3QnKSkgewogICAgLy8gRmluZCBTeW1mb255IGNvbXBvbmVudHMgaW4gcGxhaW4gcGhwIGZvciBXaW5kb3dzIHBvcnRhYmlsaXR5CgogICAgJGZpbmRlciA9IG5ldyBSZWN1cnNpdmVEaXJlY3RvcnlJdGVyYXRvcigkYXJndlsxXSwgRmlsZXN5c3RlbUl0ZXJhdG9yOjpLRVlfQVNfRklMRU5BTUUgfCBGaWxlc3lzdGVtSXRlcmF0b3I6OlVOSVhfUEFUSFMpOwogICAgJGZpbmRlciA9IG5ldyBSZWN1cnNpdmVJdGVyYXRvckl0ZXJhdG9yKCRmaW5kZXIpOwogICAgJGZpbmRlci0+c2V0TWF4RGVwdGgoZ2V0ZW52KCdTWU1GT05ZX1BIUFVOSVRfTUFYX0RFUFRIJykgPzogMyk7CgogICAgZm9yZWFjaCAoJGZpbmRlciBhcyAkZmlsZSA9PiAkZmlsZUluZm8pIHsKICAgICAgICBpZiAoJ3BocHVuaXQueG1sLmRpc3QnID09PSAkZmlsZSkgewogICAgICAgICAgICAkY29tcG9uZW50c1tdID0gZGlybmFtZSgkZmlsZUluZm8tPmdldFBhdGhuYW1lKCkpOwogICAgICAgIH0KICAgIH0KICAgIGlmICgkY29tcG9uZW50cykgewogICAgICAgIGFycmF5X3NoaWZ0KCRjbWQpOwogICAgfQp9CgokY21kWzBdID0gc3ByaW50ZignJXMgJXMgLS1jb2xvcnM9JXMnLCAkUEhQLCBlc2NhcGVzaGVsbGFyZygiJFBIUFVOSVRfRElSLyRQSFBVTklUX1ZFUlNJT05fRElSL3BocHVuaXQiKSwgZmFsc2UgPT09ICRnZXRFbnZWYXIoJ05PX0NPTE9SJykgPyAnYWx3YXlzJyA6ICduZXZlcicpOwokY21kID0gc3RyX3JlcGxhY2UoJyUnLCAnJSUnLCBpbXBsb2RlKCcgJywgJGNtZCkpLicgJTEkcyc7CgppZiAoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IpIHsKICAgICRjbWQgPSAnY21kIC92Om9uIC9kIC9jICIoJy4kY21kLicpJTIkcyInOwp9IGVsc2UgewogICAgJGNtZCAuPSAnJTIkcyc7Cn0KCmlmICgkY29tcG9uZW50cykgewogICAgJHNraXBwZWRUZXN0cyA9ICRfU0VSVkVSWydTWU1GT05ZX1BIUFVOSVRfU0tJUFBFRF9URVNUUyddID8/IGZhbHNlOwogICAgJHJ1bm5pbmdQcm9jcyA9IFtdOwoKICAgIGZvcmVhY2ggKCRjb21wb25lbnRzIGFzICRjb21wb25lbnQpIHsKICAgICAgICAvLyBSdW4gcGhwdW5pdCB0ZXN0cyBpbiBwYXJhbGxlbAoKICAgICAgICBpZiAoJHNraXBwZWRUZXN0cykgewogICAgICAgICAgICBwdXRlbnYoIlNZTUZPTllfUEhQVU5JVF9TS0lQUEVEX1RFU1RTPSRjb21wb25lbnQvJHNraXBwZWRUZXN0cyIpOwogICAgICAgIH0KCiAgICAgICAgJGMgPSBlc2NhcGVzaGVsbGFyZygkY29tcG9uZW50KTsKCiAgICAgICAgaWYgKCRwcm9jID0gcHJvY19vcGVuKHNwcmludGYoJGNtZCwgJGMsICIgPiAkYy9waHB1bml0LnN0ZG91dCAyPiAkYy9waHB1bml0LnN0ZGVyciIpLCBbXSwgJHBpcGVzKSkgewogICAgICAgICAgICAkcnVubmluZ1Byb2NzWyRjb21wb25lbnRdID0gJHByb2M7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGV4aXQgPSAxOwogICAgICAgICAgICBlY2hvICJcMDMzWzQxbUtPXDAzM1swbSAkY29tcG9uZW50XG5cbiI7CiAgICAgICAgfQogICAgfQoKICAgICRsYXN0T3V0cHV0ID0gbnVsbDsKICAgICRsYXN0T3V0cHV0VGltZSA9IG51bGw7CgogICAgd2hpbGUgKCRydW5uaW5nUHJvY3MpIHsKICAgICAgICB1c2xlZXAoMzAwMDAwKTsKICAgICAgICAkdGVybWluYXRlZFByb2NzID0gW107CiAgICAgICAgZm9yZWFjaCAoJHJ1bm5pbmdQcm9jcyBhcyAkY29tcG9uZW50ID0+ICRwcm9jKSB7CiAgICAgICAgICAgICRwcm9jU3RhdHVzID0gcHJvY19nZXRfc3RhdHVzKCRwcm9jKTsKICAgICAgICAgICAgaWYgKCEkcHJvY1N0YXR1c1sncnVubmluZyddKSB7CiAgICAgICAgICAgICAgICAkdGVybWluYXRlZFByb2NzWyRjb21wb25lbnRdID0gJHByb2NTdGF0dXNbJ2V4aXRjb2RlJ107CiAgICAgICAgICAgICAgICB1bnNldCgkcnVubmluZ1Byb2NzWyRjb21wb25lbnRdKTsKICAgICAgICAgICAgICAgIHByb2NfY2xvc2UoJHByb2MpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoISR0ZXJtaW5hdGVkUHJvY3MgJiYgMSA9PT0gY291bnQoJHJ1bm5pbmdQcm9jcykpIHsKICAgICAgICAgICAgJGNvbXBvbmVudCA9IGtleSgkcnVubmluZ1Byb2NzKTsKCiAgICAgICAgICAgICRvdXRwdXQgPSBmaWxlX2dldF9jb250ZW50cygiJGNvbXBvbmVudC9waHB1bml0LnN0ZG91dCIpOwogICAgICAgICAgICAkb3V0cHV0IC49IGZpbGVfZ2V0X2NvbnRlbnRzKCIkY29tcG9uZW50L3BocHVuaXQuc3RkZXJyIik7CgogICAgICAgICAgICBpZiAoJGxhc3RPdXRwdXQgIT09ICRvdXRwdXQpIHsKICAgICAgICAgICAgICAgICRsYXN0T3V0cHV0ID0gJG91dHB1dDsKICAgICAgICAgICAgICAgICRsYXN0T3V0cHV0VGltZSA9IG1pY3JvdGltZSh0cnVlKTsKICAgICAgICAgICAgfSBlbHNlaWYgKG1pY3JvdGltZSh0cnVlKSAtICRsYXN0T3V0cHV0VGltZSA+IDYwKSB7CiAgICAgICAgICAgICAgICBlY2hvICJcMDMzWzQxbVRpbWVvdXRcMDMzWzBtICRjb21wb25lbnRcblxuIjsKCiAgICAgICAgICAgICAgICBpZiAoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IpIHsKICAgICAgICAgICAgICAgICAgICBleGVjKHNwcmludGYoJ3Rhc2traWxsIC9GIC9UIC9QSUQgJWQgMj4mMScsICRwcm9jU3RhdHVzWydwaWQnXSksICRvdXRwdXQsICRleGl0Q29kZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHByb2NfdGVybWluYXRlKGN1cnJlbnQoJHJ1bm5pbmdQcm9jcykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmb3JlYWNoICgkdGVybWluYXRlZFByb2NzIGFzICRjb21wb25lbnQgPT4gJHByb2NTdGF0dXMpIHsKICAgICAgICAgICAgZm9yZWFjaCAoWydvdXQnLCAnZXJyJ10gYXMgJGZpbGUpIHsKICAgICAgICAgICAgICAgICRmaWxlID0gIiRjb21wb25lbnQvcGhwdW5pdC5zdGQkZmlsZSI7CiAgICAgICAgICAgICAgICByZWFkZmlsZSgkZmlsZSk7CiAgICAgICAgICAgICAgICB1bmxpbmsoJGZpbGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGYWlsIG9uIGFueSBpbmRpdmlkdWFsIGNvbXBvbmVudCBmYWlsdXJlcyBidXQgaWdub3JlIHNvbWUgZXJyb3IgY29kZXMgb24gV2luZG93cyB3aGVuIEFQQ3UgaXMgZW5hYmxlZDoKICAgICAgICAgICAgLy8gU1RBVFVTX1NUQUNLX0JVRkZFUl9PVkVSUlVOICgtMTA3Mzc0MDc5MS8weEMwMDAwNDA5KQogICAgICAgICAgICAvLyBTVEFUVVNfQUNDRVNTX1ZJT0xBVElPTiAoLTEwNzM3NDE4MTkvMHhDMDAwMDAwNSkKICAgICAgICAgICAgLy8gU1RBVFVTX0hFQVBfQ09SUlVQVElPTiAoLTEwNzM3NDA5NDAvMHhDMDAwMDM3NCkKICAgICAgICAgICAgaWYgKCRwcm9jU3RhdHVzICYmICgnXFwnICE9PSBcRElSRUNUT1JZX1NFUEFSQVRPUiB8fCAhZXh0ZW5zaW9uX2xvYWRlZCgnYXBjdScpIHx8ICFmaWx0ZXJfdmFyKGluaV9nZXQoJ2FwYy5lbmFibGVfY2xpJyksIFxGSUxURVJfVkFMSURBVEVfQk9PTEVBTikgfHwgIWluX2FycmF5KCRwcm9jU3RhdHVzLCBbLTEwNzM3NDA3OTEsIC0xMDczNzQxODE5LCAtMTA3Mzc0MDk0MF0pKSkgewogICAgICAgICAgICAgICAgJGV4aXQgPSAkcHJvY1N0YXR1czsKICAgICAgICAgICAgICAgIGVjaG8gIlwwMzNbNDFtS09cMDMzWzBtICRjb21wb25lbnRcblxuIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGVjaG8gIlwwMzNbMzJtT0tcMDMzWzBtICRjb21wb25lbnRcblxuIjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfSBlbHNlaWYgKCFpc3NldCgkYXJndlsxXSkgfHwgJ2luc3RhbGwnICE9PSAkYXJndlsxXSB8fCBmaWxlX2V4aXN0cygnaW5zdGFsbCcpKSB7CiAgICBpZiAoIWNsYXNzX2V4aXN0cyhcU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdDo6Y2xhc3MsIGZhbHNlKSkgewogICAgICAgIGNsYXNzIFN5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQKICAgICAgICB7CiAgICAgICAgfQogICAgfQogICAgYXJyYXlfc3BsaWNlKCRhcmd2LCAxLCAwLCBbJy0tY29sb3JzPScuKGZhbHNlID09PSAkZ2V0RW52VmFyKCdOT19DT0xPUicpID8gJ2Fsd2F5cycgOiAnbmV2ZXInKV0pOwogICAgJF9TRVJWRVJbJ2FyZ3YnXSA9ICRhcmd2OwogICAgJF9TRVJWRVJbJ2FyZ2MnXSA9ICsrJGFyZ2M7CiAgICBpbmNsdWRlICIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIvcGhwdW5pdCI7Cn0KCmV4aXQoJGV4aXQpOwoiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZG9jQmxvY2siO047czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";